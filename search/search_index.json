{"config":{"lang":["zh","en","ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"o(\u3003'\u25bd'\u3003)o Hi!","text":"<p> \u7ea6 176 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"#twinkle","title":"\u8fd9\u91cc\u662fTwinkle\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\u54e6\uff01","text":"<p>\u5982\u679c\u4f60\u559c\u6b22\uff0c\u4e0d\u59a8\u70b9\u4e2astar\u5427\uff01</p> <p>Note</p> <p>\u7a7a\u4e2d\u673a\u5668\u4eba \u673a\u5668\u5b66\u4e60</p> <p> \u670b\u53cb\u4eec! /   \u7ad9\u70b9\u7edf\u8ba1</p> <p>\u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a2270 \u4ee3\u7801\u5757\u884c\u6570\uff1a356 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a</p>"},{"location":"links/","title":"\u53cb\u94fe","text":"<p>Abstract</p> <p>\u4e00\u4e9b\u670b\u53cb\u4eec\u7684\u7b14\u8bb0\u672c\uff01</p> donotknow's blog \u8d85\u7231\u5b66\u4e60\u7684\u5b66\u5f1f \u66f2\u5947's blog metriver Philfan \u65e0\u654c\u4e86\u5b69\u5b50"},{"location":"Class/%E4%BC%A0%E6%84%9F%E4%B8%8E%E6%A3%80%E6%B5%8B/","title":"\u4f20\u611f\u4e0e\u68c0\u6d4b","text":"<p> \u7ea6 54 \u4e2a\u5b57 </p>"},{"location":"Class/%E4%BC%A0%E6%84%9F%E4%B8%8E%E6%A3%80%E6%B5%8B/#_2","title":"\u6210\u7ee9\u6784\u6210","text":"<p>\u5b9e\u9a8c25%+\u8003\u8bd555%+\u5e73\u65f615%</p>"},{"location":"Class/%E4%BC%A0%E6%84%9F%E4%B8%8E%E6%A3%80%E6%B5%8B/#_3","title":"\u57fa\u672c\u77e5\u8bc6","text":""},{"location":"Class/%E4%BC%A0%E6%84%9F%E4%B8%8E%E6%A3%80%E6%B5%8B/#_4","title":"\u4eea\u8868\u7684\u6307\u6807","text":"<ul> <li>\u9759\u6001\u6307\u6807</li> <li>\u6d4b\u91cf\u8303\u56f4</li> <li>\u6d4b\u91cf\u7cbe\u5ea6</li> <li>\u52a8\u6001\u6307\u6807</li> <li>\u653e\u5927\u500d\u6570K</li> <li>T</li> <li>\\(\\tau\\)</li> </ul>"},{"location":"Class/%E4%BC%A0%E6%84%9F%E4%B8%8E%E6%A3%80%E6%B5%8B/#_5","title":"\u76f8\u5173\u672f\u8bed","text":""},{"location":"Class/%E6%99%BA%E8%83%BD%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E5%BC%80%E5%8F%91/","title":"\u667a\u80fd\u7535\u5b50\u8bbe\u5907\u5f00\u53d1","text":"<p> \u7ea6 41 \u4e2a\u5b57 </p>"},{"location":"Class/%E6%99%BA%E8%83%BD%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E5%BC%80%E5%8F%91/#_2","title":"\u6210\u7ee9\u7ec4\u6210","text":"<p>10%\u5e73\u65f6+10%\u8bfb\u4e66\u62a5\u544a+10%\u601d\u653f\u62a5\u544a+30%\u8bbe\u8ba1\u4f5c\u4e1a+40%\u5b9e\u7269\u5236\u4f5c</p>"},{"location":"Class/%E6%99%BA%E8%83%BD%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E5%BC%80%E5%8F%91/#_3","title":"\u667a\u80fd\u7535\u5b50\u8bbe\u5907","text":""},{"location":"Class/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","title":"\u673a\u5668\u5b66\u4e60","text":"<p> \u7ea6 71 \u4e2a\u5b57 </p>"},{"location":"Class/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_2","title":"\u76d1\u7763\u5b66\u4e60","text":"<pre><code>\u5b9a\u4e49\nx -&gt; y\n\u4f9d\u9760\u7ed9\u5b9ax y\u8fdb\u884c\u5b66\u4e60\uff0c\u8bd5\u56fe\u5f97\u5230\u6620\u5c04\u5173\u7cfb\uff0c\u5e76\u5bf9\u672a\u89c1\u8fc7\u7684\u6570\u636e\u8fdb\u884c\u9884\u6d4b\u8f93\u51fa\u7ed3\u679c\n</code></pre>"},{"location":"Class/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_3","title":"\u56de\u5f52","text":"<p>\u5b9a\u4e49\uff1a\u4ece\u65e0\u6570\u6570\u636e\u4e2d\u5b66\u4e60\u5f97\u5230\u4e00\u4e2a\u6570\u5b57</p> <p></p>"},{"location":"Class/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_4","title":"\u5206\u7c7b","text":""},{"location":"Class/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_5","title":"\u975e\u76d1\u7763\u5b66\u4e60","text":""},{"location":"Class/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/","title":"\u73b0\u4ee3\u63a7\u5236\u539f\u7406","text":"<p> \u7ea6 56 \u4e2a\u5b57 </p>"},{"location":"Class/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_2","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u79bb\u6563\u7cfb\u7edf\uff1a\u8fde\u7eed\u7684\u88ab\u63a7\u5bf9\u8c61+\u79bb\u6563\u7684\u63a7\u5236\u5668+\u91c7\u6837\u5668+\u4fdd\u6301\u5668</li> <li>\u8ba1\u7b97\u673a\u4e0d\u80fd\u5904\u7406\u8fde\u7eed\u65f6\u95f4\u4fe1\u53f7</li> </ul>"},{"location":"Class/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_3","title":"\u4fe1\u53f7\u7684\u91c7\u6837\u4e0e\u4fdd\u6301","text":""},{"location":"Class/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_4","title":"\u91c7\u6837","text":""},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/","title":"\u7535\u6c14\u63a7\u5236\u6280\u672f","text":"<p> \u7ea6 476 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_2","title":"\u7535\u673a\u5b66","text":""},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_3","title":"\u53d8\u538b\u5668","text":""},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_4","title":"\u5206\u7c7b","text":"<ul> <li>\u76f8\u6570\uff1a\u5355\u76f8\u3001\u4e09\u76f8</li> <li>\u7ed5\u7ec4\uff1a\u53cc\u7ed5\u7ec4\u3001\u4e09\u7ed5\u7ec4\u3001\u591a\u7ed5\u7ec4\u3001\u81ea\u8026</li> <li>\u51b7\u5374\u65b9\u5f0f\uff1a\u6cb9\u6d78\u5f0f\u3001\u5e72\u5f0f</li> <li>\u94c1\u5fc3\u7ed3\u6784 \uff1a\u82af\u5f0f\u3001\u58f3\u5f0f</li> </ul>"},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_5","title":"\u57fa\u672c\u7ed3\u6784\uff08\u975e\u91cd\u70b9\uff09","text":"<ul> <li>\u7ed3\u6784\uff1a\u94c1\u5fc3\uff1b\u9ad8\u3001\u4f4e\u538b\u4e24\u5957\u7ed5\u7ec4</li> <li>\u94c1\u82af\uff1a\u53e0\u7247\u5f0f\u3001\u6e10\u5f00\u7ebf\u5f0f</li> <li>\u5176\u4e2d\uff0c\u53e0\u7247\u5f0f\u53c8\u5206\u82af\u5f0f\u548c\u58f3\u5f0f</li> </ul>"},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_6","title":"\u989d\u5b9a\u503c","text":"<ul> <li>\u989d\u5b9a\u5bb9\u91cf\uff1a\\(S_N\\)\uff08\u89c6\u5728\u529f\u7387VA\uff09</li> <li>\u539f\u8fb9\u3001\u526f\u8fb9\u7684\u989d\u5b9a\u5bb9\u91cf\u76f8\u7b49</li> <li>\u989d\u5b9a\u7535\u538b\uff1a\u539f\u8fb9\\(U_{1N}\\),\u526f\u8fb9\\(U_{2N}\\)</li> <li>\u526f\u8fb9\u989d\u5b9a\u7535\u538b\\(U_{2N}\\)\u662f\u53d8\u538b\u5668\u539f\u8fb9\u5916\u52a0\u989d\u5b9a\u7535\u538b\\(U_{1N}\\)\u65f6\u526f\u8fb9\u7684\u7a7a\u8f7d\u7535\u538b</li> <li>\u4e09\u76f8\u53d8\u538b\u5668\uff0c\u989d\u5b9a\u7535\u538b\u6307\u7ebf\u7535\u538b</li> <li>\u989d\u5b9a\u7535\u6d41\uff1a\u539f\u8fb9\\(I_{1N}\\),\u526f\u8fb9\\(I_{2N}\\)</li> <li>\u5355\u76f8\u53d8\u538b\u5668\uff1a \\(I_{1N} = \\frac{S_N}{U_{1N}}  \\quad I_{2N} = \\frac{S_N}{U_{2N}}\\)</li> <li>\u4e09\u76f8\u53d8\u538b\u5668\uff1a \\(I_{1N} = \\frac{S_N}{\\sqrt{3}U_{1N}} \\quad I_{2N} = \\frac{S_N}{\\sqrt{3}U_{2N}}\\)</li> <li>\u989d\u5b9a\u9891\u7387\uff1a\\(f_N = 50Hz\\)</li> </ul>"},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#_7","title":"\u57fa\u672c\u5de5\u4f5c\u539f\u7406","text":"<ul> <li>\u82e5\u78c1\u901a\u6309\u6b63\u5f26\u89c4\u5f8b\u53d8\u5316\uff0c\u5373 \\(\\Phi = \\Phi_msin\\omega t \\quad e_1 = -w_1 \\omega \\Phi_m cos\\omega t = 2 \\pi fw_1 \\Phi_m sin(\\omega t -90^0)\\)</li> <li>\u7528\u5411\u91cf\u8868\u793a\u6709 \\(\\dot{E_1}  = -j\\sqrt{2} fw_1 \\dot{ \\Phi}_m\\)</li> <li>\u540c\u7406\u6709 \\(\\dot{E_2}  = -j \\sqrt{2} fw_2 \\dot{ \\Phi}_m\\)</li> <li>\u53d8\u538b\u5668\u53d8\u6bd4\\(k = \\frac{E_1}{E_2}=\\frac{w_1}{w_2} \\simeq  \\frac{U_{1N}}{U_{2N}}\\)</li> </ul>"},{"location":"Class/%E7%94%B5%E6%B0%94%E6%8E%A7%E5%88%B6%E6%8A%80%E6%9C%AF/#ue","title":"U\u548cE\u6b63\u65b9\u5411\u7684\u5224\u5b9a","text":"<p>\u53d8\u538b\u5668U&amp;E\u65b9\u5411\u6807\u6ce8_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u9996\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u901a\u7535\u87ba\u7ebf\u7ba1\uff0c\u5c06\u901a\u7535\u7684\u87ba\u7ebf\u7ba1\u770b\u4f5c\u4e00\u4e2a\u7535\u6e90\uff0c\u7535\u6e90\u5185\u90e8\u7535\u6d41\u4ece\u8d1f\u6781\u6d41\u5411\u6b63\u7ea7\uff0c\u56e0\u6b64E\u548cU\u7684\u65b9\u5411\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u539f\u8fb9\u7684\u65b9\u5411\u4e0e\u4e0a\u8ff0\u901a\u7535\u87ba\u7ebf\u7ba1\u5224\u65ad\u4e00\u81f4\u3002\u518d\u6839\u636e\u53f3\u624b\u5b9a\u5219\u5224\u65ad\u78c1\u901a\u7684\u65b9\u5411\uff0c\u5982\u56fe\\(\\phi\\)\u6240\u793a\uff0c\u518d\u6839\u636e\u53f3\u624b\u87ba\u65cb\u5b9a\u5219\u5224\u65ad\u526f\u8fb9\u7535\u6d41\\(i_2\\)\u7684\u65b9\u5411\uff0c\u518d\u6839\u636e\u4e0a\u9762\u7684\u65b9\u6cd5\u5224\u65adE\u548cU\u7684\u65b9\u5411\u3002</p> <p></p>"},{"location":"Class/%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/","title":"\u7a7a\u4e2d\u673a\u5668\u4eba","text":"<p> \u7ea6 104 \u4e2a\u5b57 </p>"},{"location":"Class/%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/#_2","title":"\u57fa\u672c\u77e5\u8bc6","text":"<p>\u5b9a\u4e49: \u62e5\u6709\u81ea\u5236\u548c\u81ea\u4e3b\u80fd\u529b</p>"},{"location":"Class/%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/#_3","title":"\u5206\u7c7b","text":"<ul> <li>\u56fa\u5b9a\u7ffc</li> <li>\u673a\u4f53\u7ed3\u6784\u3001\u822a\u7535\u7cfb\u7edf\u3001\u52a8\u529b\u7cfb\u7edf\u3001\u8d77\u964d\u7cfb\u7edf\u3001\u5730\u9762\u63a7\u5236\u7ad9</li> <li>\u65cb\u7ffc</li> <li>\u6251\u7ffc</li> <li>\u6c14\u56ca</li> <li>\u4f1e\u7ffc</li> </ul>"},{"location":"Class/%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/#_4","title":"\u7a7a\u4e2d\u673a\u5668\u4eba","text":"<p>WGS-84\u5750\u6807\u7cfb</p> <p>\u5f53\u524dGPS\u6240\u7528\u7684\u5750\u6807\u7cfb\uff08\u5730\u7403\u662f\u4e00\u4e2a\u692d\u5706\uff09</p> <p>Note</p> <p>GPS\u7684\u6d77\u62d4\u9ad8\u5ea6\u4e0d\u51c6</p>"},{"location":"Class/%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/#_5","title":"\u5b9e\u9a8c\u8bfe\u7a0b","text":"<pre><code>\u6811\u8393\u6d3e\u5bc6\u7801:\npi\n</code></pre>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/","title":"\u81ea\u52a8\u5316\u7ade\u8d5b\u5b9e\u8bad","text":"<p> \u7ea6 243 \u4e2a\u5b57  356 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_2","title":"\u673a\u5668\u89c6\u89c9","text":""},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_3","title":"\u74f6\u76d6\u989c\u8272\u68c0\u6d4b","text":"<ul> <li>\u56fe\u7247HSV\u63d0\u53d6</li> </ul> <pre><code>import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimage=cv2.imread('../picture/white.bmp')\nHSV=cv2.cvtColor(image,cv2.COLOR_BGR2HSV)\ndef getpos(event,x,y,flags,param):\n    if event==cv2.EVENT_LBUTTONDOWN: #\u5b9a\u4e49\u4e00\u4e2a\u9f20\u6807\u5de6\u952e\u6309\u4e0b\u53bb\u7684\u4e8b\u4ef6\n        print(HSV[y,x])\n\ncv2.imshow(\"imageHSV\",HSV)\ncv2.imshow('image',image)\ncv2.setMouseCallback(\"imageHSV\",getpos)\ncv2.waitKey(0)\n</code></pre> <p>\u8fd0\u884c\u4e4b\u540e\uff0c\u4f1a\u51fa\u73b0 <code>png</code>\u548c<code>hsv</code>\u4e24\u4e2a\u56fe\u7247\uff0c\u70b9\u51fb<code>hsv</code>\u7684\u4f4d\u7f6e\u5373\u53ef\u63d0\u53d6\u8be5\u70b9\u7684\u503c\uff0c\u7136\u540e\u83b7\u5f97\u8be5\u56fe\u7247\u7684\u989c\u8272\u8303\u56f4</p> <ul> <li>\u989c\u8272\u8bc6\u522b\u4ee3\u7801</li> </ul> <pre><code>import cv2\nimport numpy as np\nimport os\n\n# \u5b9a\u4e49\u989c\u8272\u8303\u56f4\u7684\u5b57\u5178\uff0c\u4f7f\u7528HSV\u989c\u8272\u7a7a\u95f4\u8868\u793a\n# \u5229\u7528get_hsv.py\u83b7\u53d6\u56fe\u7247\u7684CSV\u8303\u56f4\uff08\u4ec5\u9002\u7528\u4e8e\u672c\u6b21lab\uff0c\u56fe\u4e2d\u7684white\u5f88\u50cfblue\uff09\nCOLOR_RANGES = {\n    'red': [(0, 100, 100), (10, 255, 255)],\n    'green': [(60, 190, 150), (70, 220, 255)],\n    'blue': [(90, 100, 250), (125, 230, 255)],\n    'yellow': [(30, 226, 187), (35, 238, 255)],\n    'white':[(0,0,0),(110,80,255)]\n}\n\n# \u5b9a\u4e49\u51fd\u6570\u6765\u68c0\u6d4b\u74f6\u76d6\u989c\u8272\ndef detect_cap_color(image):\n    # \u5c06\u56fe\u7247\u4eceBGR\u8f6c\u6362\u4e3aHSV\u989c\u8272\u7a7a\u95f4\n    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    \n    for color, (lower_range, upper_range) in COLOR_RANGES.items():\n        # \u8f6c\u6362\u4e3anumpy\u6570\u7ec4\uff0c\u5b9a\u4e49\u989c\u8272\u8303\u56f4\n        lower_bound = np.array(lower_range)\n        upper_bound = np.array(upper_range)\n\n        # \u521b\u5efa\u906e\u7f69\uff0c\u8fc7\u6ee4\u51fa\u7279\u5b9a\u989c\u8272\u8303\u56f4\u7684\u533a\u57df\n        mask = cv2.inRange(hsv, lower_bound, upper_bound)\n\n        # \u8ba1\u7b97\u906e\u7f69\u4e2d\u975e\u96f6\u50cf\u7d20\u7684\u6570\u91cf\uff0c\u5982\u679c\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\uff0c\u8bf4\u660e\u68c0\u6d4b\u5230\u4e86\u8be5\u989c\u8272\n        if cv2.countNonZero(mask) &gt; 0:\n            return color\n    return 'Unknown'\n\n# \u8bfb\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709BMP\u56fe\u50cf\u5e76\u8fdb\u884c\u989c\u8272\u68c0\u6d4b\ndef process_images(directory):\n    for filename in os.listdir(directory):\n        if filename.endswith(\".bmp\"):\n            # \u8bfb\u53d6\u56fe\u50cf\n            image_path = os.path.join(directory, filename)\n            image = cv2.imread(image_path)\n\n            # \u68c0\u6d4b\u989c\u8272\n            color = detect_cap_color(image)\n\n            # \u8f93\u51fa\u7ed3\u679c\n            print(f\"Image {filename}: Detected cap color is {color}\")\n\n# \u4f7f\u7528\u793a\u4f8b\nimage_directory = '../picture'  # \u66ff\u6362\u4e3a\u4f60\u7684BMP\u56fe\u7247\u96c6\u7684\u8def\u5f84\nprocess_images(image_directory)\n</code></pre> <p>\u4f7f\u7528\u56fe\u7247</p> <p></p> <p>\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b</p> <p></p> <p>Note</p> <p>```python</p> <p>import cv2 import numpy as np import os from tkinter import Tk, Button, Label, Canvas, PhotoImage from PIL import Image, ImageTk</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#hsv","title":"\u5b9a\u4e49\u989c\u8272\u8303\u56f4\u7684\u5b57\u5178\uff0c\u4f7f\u7528HSV\u989c\u8272\u7a7a\u95f4\u8868\u793a","text":""},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#get_hsvpycsvlabwhiteblue","title":"\u5229\u7528get_hsv.py\u83b7\u53d6\u56fe\u7247\u7684CSV\u8303\u56f4\uff08\u4ec5\u9002\u7528\u4e8e\u672c\u6b21lab\uff0c\u56fe\u4e2d\u7684white\u5f88\u50cfblue\uff09","text":"<p>COLOR_RANGES = {     # \u989c\u8272\u540d\u79f0\u6620\u5c04\u5230HSV\u989c\u8272\u7a7a\u95f4\u7684\u4e0a\u4e0b\u754c     'red': [(0, 100, 100), (10, 255, 255)],    # \u7ea2\u8272\u8303\u56f4     'green': [(60, 190, 150), (70, 220, 255)],  # \u7eff\u8272\u8303\u56f4     'blue': [(90, 100, 250), (125, 230, 255)],  # \u84dd\u8272\u8303\u56f4     'yellow': [(30, 226, 187), (35, 238, 255)], # \u9ec4\u8272\u8303\u56f4     'white': [(0, 0, 0), (110, 80, 255)]        # \u767d\u8272\u8303\u56f4 }</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_4","title":"\u5b9a\u4e49\u51fd\u6570\u6765\u68c0\u6d4b\u74f6\u76d6\u989c\u8272","text":"<p>def detect_cap_color(image):     # \u5c06\u56fe\u7247\u4eceBGR\u8f6c\u6362\u4e3aHSV\u989c\u8272\u7a7a\u95f4     hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)</p> <pre><code># \u904d\u5386\u989c\u8272\u8303\u56f4\u5b57\u5178\u4e2d\u7684\u6bcf\u79cd\u989c\u8272\nfor color, (lower_range, upper_range) in COLOR_RANGES.items():\n    # \u8f6c\u6362\u4e3anumpy\u6570\u7ec4\uff0c\u5b9a\u4e49\u989c\u8272\u8303\u56f4\n    lower_bound = np.array(lower_range, dtype=\"uint8\")\n    upper_bound = np.array(upper_range, dtype=\"uint8\")\n\n    # \u521b\u5efa\u906e\u7f69\uff0c\u8fc7\u6ee4\u51fa\u7279\u5b9a\u989c\u8272\u8303\u56f4\u7684\u533a\u57df\n    mask = cv2.inRange(hsv, lower_bound, upper_bound)\n\n    # \u8ba1\u7b97\u906e\u7f69\u4e2d\u975e\u96f6\u50cf\u7d20\u7684\u6570\u91cf\uff0c\u5982\u679c\u5927\u4e8e\u67d0\u4e2a\u9608\u503c\uff0c\u8bf4\u660e\u68c0\u6d4b\u5230\u4e86\u8be5\u989c\u8272\n    if cv2.countNonZero(mask) &gt; 0:\n        return color\nreturn 'Unknown'\n</code></pre>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_5","title":"\u5b9a\u4e49\u68c0\u6d4b\u56fe\u7247\u5e76\u663e\u793a\u7ed3\u679c\u7684\u51fd\u6570","text":"<p>def detect_and_display():     global image, result_label, canvas, image_label</p> <pre><code>image_directory = '../picture'\nimage_paths = [os.path.join(image_directory, f) for f in os.listdir(image_directory) if f.endswith('.bmp')]\n\nfor i, image_path in enumerate(image_paths):\n    image = cv2.imread(image_path)\n\n    scale_percent = 30\n    width = int(image.shape[1] * scale_percent / 100)\n    height = int(image.shape[0] * scale_percent / 100)\n    dim = (width, height)\n    image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)\n\n    # \u663e\u793a\u6b63\u5728\u68c0\u6d4b\u7684\u56fe\u7247\n    img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    img_pil = Image.fromarray(img_rgb)\n    img_tk = ImageTk.PhotoImage(img_pil)\n    image_label.config(image=img_tk)\n    image_label.image = img_tk  # \u4fdd\u6301\u5f15\u7528\n\n    color = detect_cap_color(image)\n    result_label.config(text=f\"\u7b2c {i+1} \u5f20\u56fe\u7247\u68c0\u6d4b\u5230\u7684\u989c\u8272\u662f: {color}\")\n\n    root.after(2000)\n    root.update()\n</code></pre>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#tkinter","title":"\u521b\u5efaTkinter\u7a97\u53e3","text":"<p>root = Tk() root.title(\"\u74f6\u76d6\u989c\u8272\u68c0\u6d4b\") root.geometry(\"800x600\")  # \u8bbe\u7f6e\u7a97\u53e3\u5927\u5c0f\u4e3a800x600</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_6","title":"\u521b\u5efa\u6309\u94ae","text":"<p>button = Button(root, text=\"\u68c0\u6d4b\", command=detect_and_display) button.pack()</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_7","title":"\u521b\u5efa\u7ed3\u679c\u6807\u7b7e","text":"<p>result_label = Label(root, text=\"\") result_label.pack()</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_8","title":"\u521b\u5efa\u56fe\u7247\u6807\u7b7e","text":"<p>image_label = Label(root) image_label.pack()</p> <p>root.mainloop()</p> <p>```</p> <p>\u8fd0\u884c\u7ed3\u679c</p> <p></p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#_9","title":"\u68b3\u5b50\u7f3a\u9f7f\u68c0\u6d4b","text":"<p>\u4ee3\u7801\u5982\u4e0b</p> <pre><code>import cv2\nimport numpy as np\n\n# \u8bfb\u53d6\u56fe\u7247\nimage_path = '../picture/1.bmp'  # \u66ff\u6362\u4e3a\u68b3\u5b50\u56fe\u7247\u8def\u5f84\nimage = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n\n# \u56fe\u50cf\u9884\u5904\u7406\uff1a\u8fdb\u884c\u6a21\u7cca\u5904\u7406\u548c\u4e8c\u503c\u5316\nblur = cv2.GaussianBlur(image, (5, 5), 0)\n_, thresh = cv2.threshold(blur, 127, 255, cv2.THRESH_BINARY_INV)\n\n# \u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\nedges = cv2.Canny(thresh, 50, 150)\n\n# \u67e5\u627e\u8f6e\u5ed3\ncontours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# \u904d\u5386\u8f6e\u5ed3\uff0c\u627e\u5230\u9f7f\u72b6\u7269\u7684\u533a\u57df\ncomb_teeth_count = 0\nmissing_teeth_count = 0\n\n# \u8bbe\u7f6e\u6700\u5c0f\u9762\u79ef\uff0c\u907f\u514d\u566a\u58f0\nmin_area = 60  # \u6839\u636e\u68b3\u5b50\u9f7f\u5927\u5c0f\u8c03\u6574\u6b64\u503c\nfor contour in contours:\n    area = cv2.contourArea(contour)\n    if area &gt; min_area:\n        comb_teeth_count += 1\n\n# \u5047\u8bbe\u6b63\u5e38\u68b3\u5b50\u6709 n \u4e2a\u9f7f\uff0c\u8ba1\u7b97\u7f3a\u5931\u9f7f\nexpected_teeth_count = 36  # \u6839\u636e\u5b9e\u9645\u68b3\u5b50\u9f7f\u6570\u4fee\u6539\nmissing_teeth_count = expected_teeth_count - comb_teeth_count\n\nprint(f'\u68b3\u5b50\u7684\u9f7f\u6570: {comb_teeth_count}')\nprint(f'\u7f3a\u5931\u7684\u9f7f\u6570: {missing_teeth_count}')\n\n# \u7f29\u653e\u56fe\u50cf\nscale_factor = 0.5  # \u8bbe\u7f6e\u7f29\u653e\u6bd4\u4f8b\uff0c0.5\u8868\u793a\u7f29\u5c0f\u4e00\u534a\nresized_image = cv2.resize(edges, None, fx=scale_factor, fy=scale_factor, interpolation=cv2.INTER_LINEAR)\n\n# \u663e\u793a\u539f\u59cb\u56fe\u50cf\u548c\u5904\u7406\u540e\u7684\u7f29\u653e\u56fe\u50cf\ncv2.imshow('Original Image', image)\ncv2.imshow('Processed Image (Resized)', resized_image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n</code></pre> <p>Note</p> <p>\u4e0d\u540c\u7167\u7247\u7531\u4e8e\u62cd\u6444\u8ddd\u79bb\u4e0d\u540c\uff0c\u5176\u6700\u5c0f\u9762\u79ef\u4e0d\u540c\uff0c\u56e0\u6b64\u4e0d\u80fd\u5e7f\u6cdb\u9002\u7528</p> <p>\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b     </p> <p>Note</p> <pre><code>import cv2\nimport numpy as np\n\n# Define image paths in order\nimage_paths = [f'../picture/{i}.bmp' for i in range(1, 9)]\n\nframe_coords = {\n    1: ([(1828, 1590), (1952, 962), (1816, 928), (1676, 1560)],\n        [(1776, 1100), (1800, 992), (696, 714), (668, 807)],\n        [(1720, 1340), (1744, 1259), (624, 982), (604, 1059)]),\n    2: ([(1757, 1873), (2008, 1282), (1882, 1220), (1615, 1812)],\n        [(1804, 1405), (1856, 1298), (832, 787), (788, 875)],\n        [(1712, 1594), (1744, 1516), (700, 1020), (664, 1098)]),\n    3: ([(1015, 1696), (1589, 1405), (1531, 1277), (943, 1558)],\n        [(1392, 1346), (1472, 1307), (1004, 267), (932, 296)],\n        [(1152, 1448), (1240, 1409), (760, 379), (672, 413)]),\n    4: ([(893, 1478), (1436, 1822), (1516, 1706), (976, 1346)],\n        [(1460, 1670), (2116, 729), (2032, 671), (1380, 1614)],\n        [(1252, 1521), (1892, 573), (1820, 530), (1172, 1473)]),\n    5: ([(350, 743), (324, 1390), (464, 1402), (504, 749)],\n        [(1608, 1409), (1616, 1307), (472, 1210), (464, 1307)],\n        [(1632, 1200), (1644, 1100), (492, 1020), (488, 1100)]),\n    6: ([(1736, 1293), (1780, 671), (1648, 656), (1588, 1293)],\n        [(1632, 836), (1640, 724), (508, 583), (495, 690)],\n        [(1608, 1040), (1616, 943), (472, 830), (464, 923)]),\n    7: ([(1308, 1650), (1300, 1510), (724, 1510), (724, 1650)],\n        [(1268, 1497), (1264, 831), (1152, 831), (1152, 1497)],\n        [(1070, 1510), (1030, 832), (930, 832), (970, 1510)]),\n    8: ([(1868, 1147), (1872, 588), (1716, 583), (1708, 1162)],\n        [(1712, 705), (1712, 603), (1048, 603), (1048, 705)],\n        [(1708, 928), (1708, 828), (1040, 828), (1036, 938)])\n}\n\ndef load_image(index):\n    img = cv2.imread(image_paths[index])\n    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    return img, img_gray\n\ndef select_frame(img, coords, color):\n    frame = np.array(coords, dtype=np.int32)\n    cv2.polylines(img, [frame], True, color, 4)\n    return frame\n\ndef calculate_variance(img_gray, frame):\n    mask = np.zeros(img_gray.shape[:2], dtype=np.uint8)\n    cv2.fillPoly(mask, [frame], 255)\n    roi = img_gray[mask &gt; 0]\n    mean_value = np.mean(roi)\n    variance = np.mean((roi - mean_value) ** 2)\n    return mean_value, variance\n\ndef display_image(img):\n    scaled_img = cv2.resize(img, (0, 0), fx=0.3, fy=0.3)\n    cv2.imshow('Pre Image with Rectangle', cv2.GaussianBlur(scaled_img, (5, 5), 0))\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\ndef blob_selection(img_gray, frame):\n    blurred = cv2.GaussianBlur(img_gray, (5, 5), 0)\n    _, binary = cv2.threshold(blurred, 200, 240, cv2.THRESH_BINARY_INV)\n    mask = np.zeros_like(binary)\n    cv2.fillPoly(mask, [frame], 255)\n    roi = cv2.bitwise_and(binary, binary, mask=mask)\n    contours, _ = cv2.findContours(roi, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    filtered_contours = [cnt for cnt in contours if cv2.arcLength(cnt, True) &gt;= 40]\n    return len(filtered_contours)\n\n\nif __name__ == \"__main__\":\n    for index in range(len(image_paths)):\n        img, img_gray = load_image(index)\n        frames = frame_coords[index + 1]\n        colors = [(0, 0, 255), (0, 255, 0), (255, 255, 0)]\n        \n        frame1_data = []\n        frame2_data = []\n        \n        for i, coords in enumerate(frames):\n            frame = select_frame(img, coords, colors[i])\n            if i == 1:\n                mean_value, variance = calculate_variance(img_gray, frame)\n                frame1_data = [blob_selection(img_gray, frame), mean_value, variance]\n            elif i == 2:\n                mean_value, variance = calculate_variance(img_gray, frame)\n                frame2_data = [blob_selection(img_gray, frame), mean_value, variance]\n                \n        missing_teeth = frame2_data[0] - frame1_data[0]\n        \n        dense_end = \"\u7eff\u8272\u6846: \u5bc6\u96c6\u7aef\" if frame2_data[1] &gt; frame1_data[1] else \"\u84dd\u8272\u6846: \u5bc6\u96c6\u7aef\" \n        \n        print(f\"\u56fe\u7247 {index + 1}:\")\n        print(f\"\u7f3a\u9f7f\u6570: {missing_teeth}\")\n        print(f\"{dense_end}\")\n\n        display_image(img)\n</code></pre> <p>\u624b\u52a8\u753b\u6846\u6765\u68c0\u6d4b\uff0c\u6709\u70b9\u5446\uff0c\u7b49\u5f85\u8fdb\u4e00\u6b65\u6539\u8fdb</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#modbus","title":"Modbus","text":""},{"location":"Class/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AB%9E%E8%B5%9B%E5%AE%9E%E8%AE%AD/#modbus_1","title":"Modbus\u4e3b\u4ece\u673a\u901a\u4fe1","text":"<p>\u4ece\u673a\u8981\u6c42</p> <ul> <li>2\u8def\u79bb\u6563\u91cf\u8f93\u5165\uff08\u6309\u952e\u4ee3\u66ff\uff09</li> <li>2\u8def\u5f00\u5173\u91cf\u63a7\u5236\uff0c\u7528LED\u6a21\u62df</li> <li>\u4e00\u8def\u6a21\u62df\u91cf\u8f93\u5165\uff0c\u7528\u7535\u4f4d\u5668\u6a21\u62df\uff08\u8f93\u5165\u5bc4\u5b58\u5668\uff09</li> <li>\u4e00\u8def\u6a21\u62df\u91cf\u8f93\u51fa\uff0c\u7528LED\u8fdb\u884cPWM\u8c03\u5149\uff08\u4fdd\u6301\u5bc4\u5b58\u5668\uff09</li> </ul> <p>\u63a5\u7ebf\u5982\u4e0b\u56fe</p> <p></p> <ul> <li>\u7f16\u8f91\u5668\uff1aArduino</li> <li>\u8c03\u7528\u5e93\uff1aModbusRTUSlave</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b</p> <pre><code>#include &lt;ModbusRTUSlave.h&gt;\n\nconst byte keyPins[2] = {4, 5};\nconst byte ledPins[3] = {2, 3, 7};\nconst byte potPin = A8;\nconst byte dePin = 13;\n\nbool coils[2];\nbool discreteInputs[2];\nuint16_t holdingRegisters[1] = {0};\nuint16_t inputRegisters[1] = {0};\n\nModbusRTUSlave modbus(Serial2, dePin);\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial2.begin(115200);\n\n  pinMode(keyPins[0], INPUT_PULLUP);\n  pinMode(keyPins[1], INPUT_PULLUP);\n  pinMode(ledPins[0], OUTPUT);\n  pinMode(ledPins[1], OUTPUT);\n  pinMode(ledPins[2], OUTPUT);\n  pinMode(potPin, INPUT);\n\n  \n  modbus.configureCoils(coils, 2);                       \n  modbus.configureDiscreteInputs(discreteInputs, 2);     \n  modbus.configureHoldingRegisters(holdingRegisters, 1); \n  modbus.configureInputRegisters(inputRegisters, 1);     \n\n  modbus.begin(1, 115200);\n}\n\nvoid loop()\n{\n  modbus.poll();\n\n  discreteInputs[0] = digitalRead(keyPins[0]); //\u6309\u952e\u672a\u6309\u4e0b\uff0cdiscreteInputs = 0\uff1b\u6309\u952e\u6309\u4e0b\uff0cdiscreteInputs = 1\n  discreteInputs[1] = digitalRead(keyPins[1]);\n\n  // Serial.print(\"Key 1: \");\n  // Serial.println(digitalRead(keyPins[0]));\n  // Serial.print(\"Key 2: \");\n  // Serial.println(digitalRead(keyPins[1]));\n\n  inputRegisters[0] = analogRead(potPin);\n  //\u63a7\u5236 LED(\u7ebf\u5708\u72b6\u6001)\n  digitalWrite(ledPins[0], coils[0] ? HIGH : LOW);//\u6839\u636e\u7ebf\u5708\u72b6\u6001\u63a7\u5236 LED\n  // digitalWrite(ledPins[0], 1);//\u6839\u636e\u7ebf\u5708\u72b6\u6001\u63a7\u5236 LED\n  // Serial.print(\"coils[0]: \");\n  // Serial.print(coils[0]);\n  // Serial.print(\" \");\n  // Serial.print(\"coils[1]: \");\n  // Serial.print(coils[1]);\n  // Serial.print(\"\\n\");\n  \n  digitalWrite(ledPins[1], coils[1] ? HIGH : LOW);//\u6839\u636e\u7ebf\u5708\u72b6\u6001\u63a7\u5236 LED\n  //\u63a7\u5236\u6a21\u62df\u91cf\u8f93\u51fa(LED PWM \u8c03\u5149)\n  analogWrite(ledPins[2],holdingRegisters[0]);//\u6839\u636e\u4fdd\u6301\u5bc4\u5b58\u5668\u7684\u503c\u8c03\u8282 LED \u4eae\u5ea6\n}\n</code></pre>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/","title":"\u81ea\u52a8\u63a7\u5236\u539f\u7406","text":"<p> \u7ea6 595 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>\u9ad8\u94c1\u4e0a\u95f2\u7740\u65e0\u804a\uff0c\u5c31\u628a\u5927\u4e8c\u4e0a\u7684\u8bfe\u6ca1\u5199\u7684\u518d\u5206\u4eab\u4e00\u4e0b</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_2","title":"\u8bfe\u7a0b\u7b80\u4ecb","text":"<p>\u8bfe\u7a0b\u5206\u6570\u6784\u6210\u4e3a40%\u7684\u5e73\u65f6\u5206+60%\u671f\u672b\u8003\u8bd5\uff0c\u5e73\u65f6\u5206\u4f1a\u6709\u8bfe\u5802\u5c0f\u6d4b\u548c\u70b9\u540d\u6784\u6210\u3002lz\u662fzsl\u73ed\u7ea7\uff0c\u8001\u5e08\u4e00\u5171\u8fdb\u884c\u4e862\u6b21\u5c0f\u6d4b\uff08\u5c0f\u6d4b\u5373\u662f\u70b9\u540d\uff09\uff0c\u5c0f\u6d4b\u7684\u9898\u76ee\u4e5f\u5341\u5206\u7b80\u5355\uff0c\u8001\u5e08\u5141\u8bb8\u8ba8\u8bba\uff0c\u6240\u4ee5\u6545\u8ba4\u4e3a\u662f\u70b9\u540d\u4f7f\u7528\uff0c\u8001\u5e08\u4e00\u822c\u5728\u65e9\u516b\u8fdb\u884c\u5c0f\u6d4b\uff0c\u5927\u5bb6\u7fd8\u8bfe\uff08\u4e0d\u662f\uff09\u4e0d\u8981\u9009\u62e9\u65e9\u516b\u3002</p> <p>\u5173\u4e8e\u542c\u8bfe\uff0c\u6211\u90fd\u662f\u542czyh\u8001\u5e08\u7684\u667a\u4e91\uff0c\u56e0\u4e3azyh\u8001\u5e08\u8bb2\u8bfe\u8fdb\u5ea6\u8f83\u6162\uff0c\u6240\u4ee5\u53ef\u4ee5\u89c2\u770b\u53bb\u5e74\u7684\u667a\u4e91\uff0c\u57fa\u672c\u4e0a\u4e0d\u4f1a\u6709\u592a\u5927\u7684\u533a\u522b\uff0c</p> <p>\u7ecf\u8fc7\u5b66\u957f\u7684\u5206\u4eab\u548c\u81ea\u5df1\u5b66\u8fc7\u7684\u4eb2\u8eab\u4f53\u9a8c\uff0c\u8fd9\u95e8\u8bfe\u76f8\u5bf9\u4e8e\u4fe1\u53f7\u786e\u5b9e\u662f\u5bb9\u6613\u4e00\u70b9\uff0c\u8003\u8bd5\u4e00\u822c\u90fd\u662f\u5e38\u89c1\u7684\u9898\u578b\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u95e8\u8bfe\u7a0b\u9898\u578b\uff08\u89e3\u9898\u6280\u5de7\uff09\u4f17\u591a\uff0c\u6240\u4ee5\u5927\u5bb6\u4e5f\u4e0d\u80fd\u771f\u4e0d\u5b66[aco1]\uff0c\u5e73\u65f6\u8ba4\u771f\u5b8c\u6210\u4f5c\u4e1a\u548c\u542c\u8bfe\u5c31\u884c\uff0c\u671f\u672b\u8003\u8bd5\u6211\u4eec\u8fd9\u5b66\u671f\u662f\u5728\u6700\u540e\u4e00\u95e8\uff0c\u6240\u4ee5\u524d\u9762\u90fd\u6ca1\u6709\u590d\u4e60\u81ea\u63a7\uff0c\u540e\u9762\u901f\u901a\uff0c\u6548\u679c\u8fd8\u4e0d\u9519\u3002</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_3","title":"\u8d44\u6599\u5206\u4eab","text":"<p>https://pan.baidu.com/s/1GKyIgORzcuIYSWymL99kig?pwd=ORZJ</p> <pre><code>|--zyhPPT\n|--\u81ea\u63a7\u4f5c\u4e1a\u7b54\u6848\u8be6\u89e3\n|--2024\u5e74\u65b0\u7b54\u6848\n|--\u81ea\u52a8\u63a7\u5236\u539f\u7406\u4e66&amp;\u5b66\u4e60\u8f85\u5bfc\n|--\u81ea\u52a8\u63a7\u5236\u539f\u7406\u8003\u8bd5A4\n</code></pre> <p>https://control.myth.cx/</p> <p>\u8fd9\u4e2a\u7f51\u7ad9\u91cc\u9762\u6709\u6240\u6709\u9898\u76ee\u7684\u7b54\u6848\uff0c\u662f\u4e00\u4e2a\u5b66\u957f\u81ea\u5df1\u5199\u7684\uff0c\u53ef\u4f9b\u5927\u5bb6\u53c2\u8003</p>"},{"location":"Class/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/#_4","title":"\u8003\u8bd5\u7ecf\u9a8c","text":"<p>\u8003\u8bd5\u7684\u8bdd\uff0c\u6211\u662f\u6ca1\u6709\u770b98\u7684\u5386\u5e74\u5377\u7684\uff0c\u6b63\u5982\u524d\u9762\u6240\u8bf4\uff0c\u638c\u63e1\u9898\u578b\u7684\u89e3\u9898\u65b9\u6cd5\u5373\u53ef\uff0c\u6211\u662f\u5728\u8003\u8bd5\u524d\u628a\u6240\u6709\u4f5c\u4e1a\u9898\u90fd\u505a\u4e86\u4e00\u904d\uff0c\u7136\u540e\u8003\u573a\u53d1\u73b0\u51e0\u9053\u9898\u76ee\u5927\u81f4\u4e0d\u53d8\u7684\u9898\uff08\u4e00\u5171\u5c317\u9053\uff09\u3002and\u8003\u8bd5\u7684\u65f6\u5019\u8ba1\u7b97\u91cf\u5341\u5206\u5927\u7684\u65f6\u5019\uff0c\u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u7528\u5e38\u89c4\u7684\u89e3\u9898\u65b9\u6cd5\u53bb\u505a\uff0c\u56e0\u4e3a\u5f88\u6709\u53ef\u80fd\u4f60\u505a\u4e0d\u5b8c\uff01\uff01\uff01\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u7528\u8ba1\u7b97\u673a\u6216\u8005\u8fd9\u4e2a\u72b6\u6001\u65b9\u7a0b\u662f\u4e0d\u662f\u80fd\u63a7\u6807\u51c6\u578b\u6216\u8005\u80fd\u89c2\u6807\u51c6\u578b\u3002\u4eca\u5e74\u8003\u8bd5\u7684\u65f6\u5019\u5c31\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u5361\u897f\u6b27\u6c42\u89e34\u6b21\u65b9\u7a0b\u7684\u6839\u5224\u65ad\u88d5\u5ea6\uff08\u5341\u5206\u5de7\u5361\u897f\u6b27\u6700\u9ad8\u53ea\u80fd\u6c42\u89e34\u6b21[ac01]\uff09\u3002\u56e0\u6b64\u5927\u5bb6\u4e00\u5b9a\u8981\u5e26\u5361\u897f\u6b27\u8ba1\u7b97\u673a\uff0c\u8003\u524d\u5b66\u4f1a\u590d\u6570\u7b97\u89d2\u5ea6\u3001\u6c42\u89e3\u65b9\u7a0b\u7b49\u7684\u65b9\u6cd5\uff01\uff01\uff01</p>"},{"location":"Tools/Createsite/","title":"Create site","text":"<p> \u7ea6 43 \u4e2a\u5b57 </p>"},{"location":"Tools/Createsite/#_1","title":"\u5982\u4f55\u5728\u672c\u5730\u67e5\u770b\u4fee\u6539","text":"<ul> <li><code>cd &lt;\u76ee\u6807\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e&gt;</code> </li> <li><code>mkdocs serve</code></li> <li><code>\u8fdb\u5165http://127.0.0.1:8000/\u5373\u53ef\u67e5\u770b\u5f53\u524d\u4fee\u6539</code></li> <li>\u6ce8\u610f\u672c\u5730\u4fee\u6539\u53ef\u80fd\u548cGithub\u4e0a\u6700\u7ec8\u7ed3\u679c\u4e0d\u4e00\u81f4</li> </ul>"},{"location":"Tools/Git/","title":"Git","text":"<p> \u7ea6 203 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"Tools/Git/#_1","title":"\u57fa\u672c\u6307\u4ee4","text":""},{"location":"Tools/Git/#_2","title":"\u65b0\u5efa\u3001\u7ba1\u7406\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u76f4\u63a5\u5728GitHub\u5b98\u7f51\u5efa\u7acb\u4ed3\u5e93</p>"},{"location":"Tools/Git/#_3","title":"\u514b\u9686\u3001\u66f4\u65b0\u672c\u5730\u4ed3\u5e93\u526f\u672c","text":"<p><code>git init</code> \u521b\u5efa\u4ed3\u5e93</p> <p><code>git clone https://github.com/xxx/xxx.git</code> \u514b\u9686\u7f51\u4e0a\u7684\u9879\u76ee</p> <p><code>git branch</code> \u67e5\u770b\u5206\u652f\u5217\u8868</p> <p><code>git checkout &lt;\u5207\u6362\u7684\u5206\u652f\u540d&gt;</code> \u5207\u6362\u5230\u76ee\u6807\u5206\u652f</p>"},{"location":"Tools/Git/#_4","title":"\u66f4\u65b0\u51b2\u7a81\u89e3\u51b3\u65b9\u6848","text":"<p><code>git stash</code> \u6682\u5b58\u672c\u5730\u4fee\u6539</p> <p><code>git pull</code> \u66f4\u65b0</p> <p><code>git stash pop</code> \u6062\u590d\u672c\u5730\u4fee\u6539</p> <ul> <li>\u540e\u7eed\u4f1a\u663e\u793a\u51fa\u51b2\u7a81\u4fee\u6539\u7684\u6587\u4ef6\uff0c\u9700\u8981\u624b\u52a8\u4eba\u5de5\u5904\u7406</li> </ul>"},{"location":"Tools/Git/#_5","title":"\u63d0\u4ea4\u6587\u4ef6\u5230\u7f13\u5b58\u533a","text":"<p><code>git status</code> \u67e5\u770b\u4fee\u6539\u6587\u4ef6\u5217\u8868</p> <p><code>git add [\u6587\u4ef6] [\u6587\u4ef6]</code> \u63d0\u4ea4\u6307\u5b9a\u6587\u4ef6\u5230\u7f13\u5b58\u533a</p> <p><code>git add *</code> \u63d0\u4ea4\u5168\u90e8\u6587\u4ef6\u5230\u7f13\u5b58\u533a</p>"},{"location":"Tools/Git/#_6","title":"\u63d0\u4ea4\u672c\u5730\u4ed3\u5e93","text":"<p><code>git commit -m \"[\u8ddf\u65b0\u65e5\u5fd7]\"</code></p> <p><code>git log</code> \u67e5\u770b\u4fee\u6539\u7684\u4fe1\u606f\u4ee5\u53ca\u4f5c\u8005</p>"},{"location":"Tools/Git/#_7","title":"\u4e0a\u4f20\u8fdc\u7a0b\u4ed3\u5e93","text":"<p><code>git push</code></p>"},{"location":"Tools/Git/#_8","title":"\u521b\u5efa\u5206\u652f","text":"<p><code>git checkout -b &lt;\u4f60\u7684\u5206\u652f\u540d&gt;</code></p>"},{"location":"Tools/latex/","title":"Latex","text":"<p> \u7ea6 7 \u4e2a\u5b57 </p>"},{"location":"Tools/latex/#_1","title":"\u4f2a\u4ee3\u7801\u5206\u6bb5","text":"<p>https://blog.csdn.net/HsinglukLiu/article/details/121341941</p>"},{"location":"Tools/python/","title":"Latex","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p>"},{"location":"Tools/python/#merryerror","title":"merryerror","text":"<p>Python\u5b66\u4e60\uff1anumpy\u5e93 \u6570\u636e\u91cf\u592a\u5927\u51fa\u73b0Memory Error\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u6c47\u603b_numpy memory error-CSDN\u535a\u5ba2</p>"},{"location":"Tools/Linux/linux/","title":"Windows\u548cUbuntu\u53cc\u7cfb\u7edf\u66f4\u6539\u5f00\u673a\u9ed8\u8ba4\u542f\u52a8\u987a\u5e8f","text":"<p> \u7ea6 138 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>Bug</p> <p>\u5982\u679c\u662f\u8054\u60f3\u62ef\u6551\u8005\uff0c\u8bf7\u4e0d\u8981\u63d2\u7740PD\u5feb\u5145\u5f00\u673a\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4cfg\u6587\u4ef6\u91cd\u7f6e</p>"},{"location":"Tools/Linux/linux/#1bootgrub","title":"1.\u6253\u5f00\u7ec8\u7aef\u8fdb\u5165/boot/grub/\u76ee\u5f55","text":"<p><code>cd /boot/grub</code></p> <p></p>"},{"location":"Tools/Linux/linux/#2grubcfg","title":"2.\u7f16\u8f91grub.cfg\u6587\u4ef6","text":"<p><code>sudo gedit grub.cfg</code>\u8f93\u5165\u7535\u8111\u5bc6\u7801\u5f00\u59cb\u7f16\u8f91</p> <p></p> <p>Note</p> <p>\u5982\u679c\u62c5\u5fc3\u7f16\u8f91\u51fa\u9519\uff0c\u53ef\u4ee5\u5148\u4fdd\u5b58\u6587\u4ef6\u518d\u7f16\u8f91 <code>mv grub.cfg grub.cfg.back</code> </p>"},{"location":"Tools/Linux/linux/#3windows","title":"3.\u627e\u5230windows\u7684\u4f4d\u7f6e","text":""},{"location":"Tools/Linux/linux/#4ubuntu","title":"4.\u7c98\u8d34\u5230ubuntu\u4e4b\u524d","text":""},{"location":"Tools/Linux/linux/#5","title":"5.\u4fdd\u5b58\uff0c\u91cd\u542f","text":""},{"location":"Tools/Linux/linux/#6","title":"6.\u7f8e\u5316\u63aa\u65bd","text":"<p>\u53ef\u4ee5\u81ea\u884c\u547d\u540d\uff0c\u4fee\u6539\u7ed3\u679c\u4f1a\u5728boot\u754c\u9762\u663e\u793a</p> <p></p>"}]}